<?php

include_once("./Services/Repository/classes/class.ilObjectPlugin.php");
include_once("./Services/Tracking/interfaces/interface.ilLPStatusPlugin.php");

/**
 * Class ilObjDhbwTraining
 *
 * @author: Benjamin Seglias   <bs@studer-raimann.ch>
 */

class ilObjDhbwTraining extends ilObjectPlugin  implements ilLPStatusPluginInterface {


	/**
	 * Constructor
	 *
	 * @access        public
	 *
	 * @param int $a_ref_id
	 */
	public function __construct($a_ref_id = 0) {
		parent::__construct($a_ref_id);
	}


	protected function initType() {
		$this->setType(ilDhbwTrainingPlugin::PLUGIN_PREFIX);
	}


	public function doCreate() {
		parent::doCreate(); // TODO: Change the autogenerated stub
	}


	public function doRead() {
		parent::doRead(); // TODO: Change the autogenerated stub
	}


	public function doUpdate() {
		parent::doUpdate(); // TODO: Change the autogenerated stub
	}


	public function doDelete() {
		$xdht_participants = xdhtParticipant::where(array('training_obj_id' => ilObjectFactory::getInstanceByRefId($_GET['ref_id'])))->get();
		foreach($xdht_participants as $xdht_participant) {
			$xdht_participant->delete();
		}
		xdhtSettings::where(array('training_obj_id' => ilObjectFactory::getInstanceByRefId($_GET['ref_id'])))->first()->delete();
	}


	/**
	 * @param ilObjDhbwTraining $new_obj Instance of
	 * @param int                   $a_target_id obj_id of the new created object
	 * @param int                   $a_copy_id
	 *
	 * @return bool|void
	 */
	public function doCloneObject($new_obj, $a_target_id, $a_copy_id = NULL) {
		assert(is_a($new_obj, ilObjDhbwTraining::class));

		$xdhtSettings = xdhtSettings::find(array('training_obj_id' => $this->getId()));
		if($xdhtSettings instanceof  xdhtSettings) {
			$xdht_settings_clone = $xdhtSettings->copy();
			$xdht_settings_clone->setDhbwTrainingObjectId($new_obj->getId());
			$xdht_settings_clone->create();
		}

		$xdhtParticipants = xdhtParticipant::where(array('training_obj_id' => $this->getId()))->get();
		if(!empty($xdhtParticipants)) {
			foreach ($xdhtParticipants as $xdhtParticipant) {
				$xdht_participant_clone = clone($xdhtParticipant);
				$xdht_participant_clone->setTrainingObjId($new_obj->getId());
				$xdht_participant_clone->update();
			}
		}
	}

	public static function _lookupOnline($a_obj_id, $is_reference = FALSE)
	{
		global $ilDB;

		if ($is_reference)
		{
			$result = $ilDB->queryF("SELECT rep_robj_xdht_settings.is_online FROM rep_robj_xdht_settings,object_reference WHERE object_reference.ref_id = %s AND object_reference.obj_id = rep_robj_xdht_settings.dhbw_training_object_id",
				array('integer'),
				array($a_obj_id)
			);
		}
		else
		{
			$result = $ilDB->queryF("SELECT rep_robj_xdht_settings.is_online FROM rep_robj_xdht_settings WHERE dhbw_training_object_id = %s",
				array('integer'),
				array($a_obj_id)
			);
		}
		if ($result->numRows() == 1)
		{
			$row = $ilDB->fetchAssoc($result);
			return $row["is_online"];
		}
		return 0;
	}

	/**
	 * Get all participants ids with LP status completed
	 *
	 * @return array
	 */
	public function getLPCompleted()
	{
		return xdhtParticipant::where(array(
			'status' => ilLPStatus::LP_STATUS_COMPLETED_NUM,
			'training_obj_id' => $this->getId()
		))->getArray(null, 'usr_id');
	}

	/**
	 * Get all participants ids with LP status not attempted
	 *
	 * @return array
	 */
	public function getLPNotAttempted()
	{
		$operators = array(
			'status' => '!=',
			'training_obj_id' => '='
		);
		$other_than_not_attempted = xdhtParticipant::where(array(
			'status' => ilLPStatus::LP_STATUS_NOT_ATTEMPTED_NUM,
			'training_obj_id' => $this->getId()
		), $operators)->getArray(null, 'usr_id');

		return array_diff($this->plugin->getMembers($this->plugin->lookupRefId($this->getId())), $other_than_not_attempted);
	}
	/**
	 * Get all participants ids with LP status failed
	 *
	 * @return array
	 */
	public function getLPFailed()
	{
		return xdhtParticipant::where(array(
			'status' => ilLPStatus::LP_STATUS_FAILED_NUM,
			'training_obj_id' => $this->getId()
		))->getArray(null, 'usr_id');
	}
	/**
	 * Get all participants ids with LP status in progress
	 *
	 * @return array
	 */
	public function getLPInProgress()
	{
		return xdhtParticipant::where(array(
			'status' => ilLPStatus::LP_STATUS_IN_PROGRESS_NUM,
			'training_obj_id' => $this->getId()
		))->getArray(null, 'usr_id');
	}
	/**
	 * Get current status for given participant
	 *
	 * @param int $a_participant_id
	 * @return int
	 */
	public function getLPStatusForUser($a_participant_id)
	{
		$participant = xdhtParticipant::where(array(
			'usr_id' => $a_participant_id,
			'training_obj_id' => $this->getId()
		))->first();
		if ($participant) {
			return $participant->getStatus();
		}
		return ilLPStatus::LP_STATUS_NOT_ATTEMPTED_NUM;
	}



}